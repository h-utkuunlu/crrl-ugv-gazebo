// Generated by gencpp from file sim_real_msg_interface/Odometry.msg
// DO NOT EDIT!


#ifndef SIM_REAL_MSG_INTERFACE_MESSAGE_ODOMETRY_H
#define SIM_REAL_MSG_INTERFACE_MESSAGE_ODOMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace sim_real_msg_interface
{
template <class ContainerAllocator>
struct Odometry_
{
  typedef Odometry_<ContainerAllocator> Type;

  Odometry_()
    : header()
    , ap_time(0.0)
    , wheel_R(0.0)
    , wheel_L(0.0)
    , gyro()
    , acc1()
    , acc2()
    , magn()
    , velocity(0.0)
    , omega(0.0)  {
    }
  Odometry_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ap_time(0.0)
    , wheel_R(0.0)
    , wheel_L(0.0)
    , gyro(_alloc)
    , acc1(_alloc)
    , acc2(_alloc)
    , magn(_alloc)
    , velocity(0.0)
    , omega(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _ap_time_type;
  _ap_time_type ap_time;

   typedef float _wheel_R_type;
  _wheel_R_type wheel_R;

   typedef float _wheel_L_type;
  _wheel_L_type wheel_L;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _gyro_type;
  _gyro_type gyro;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acc1_type;
  _acc1_type acc1;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acc2_type;
  _acc2_type acc2;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _magn_type;
  _magn_type magn;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _omega_type;
  _omega_type omega;





  typedef boost::shared_ptr< ::sim_real_msg_interface::Odometry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sim_real_msg_interface::Odometry_<ContainerAllocator> const> ConstPtr;

}; // struct Odometry_

typedef ::sim_real_msg_interface::Odometry_<std::allocator<void> > Odometry;

typedef boost::shared_ptr< ::sim_real_msg_interface::Odometry > OdometryPtr;
typedef boost::shared_ptr< ::sim_real_msg_interface::Odometry const> OdometryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sim_real_msg_interface::Odometry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sim_real_msg_interface::Odometry_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sim_real_msg_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sim_real_msg_interface': ['/home/huu201/workspace/gazebo_crrl_ugv/src/sim_real_msg_interface/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sim_real_msg_interface::Odometry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sim_real_msg_interface::Odometry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sim_real_msg_interface::Odometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sim_real_msg_interface::Odometry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sim_real_msg_interface::Odometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sim_real_msg_interface::Odometry_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sim_real_msg_interface::Odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89f83a34da9c89a443ae852ee70fa087";
  }

  static const char* value(const ::sim_real_msg_interface::Odometry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89f83a34da9c89a4ULL;
  static const uint64_t static_value2 = 0x43ae852ee70fa087ULL;
};

template<class ContainerAllocator>
struct DataType< ::sim_real_msg_interface::Odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sim_real_msg_interface/Odometry";
  }

  static const char* value(const ::sim_real_msg_interface::Odometry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sim_real_msg_interface::Odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
float32 ap_time\n\
float32 wheel_R\n\
float32 wheel_L\n\
geometry_msgs/Vector3 gyro\n\
geometry_msgs/Vector3 acc1\n\
geometry_msgs/Vector3 acc2\n\
geometry_msgs/Vector3 magn\n\
float32 velocity\n\
float32 omega\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::sim_real_msg_interface::Odometry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sim_real_msg_interface::Odometry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ap_time);
      stream.next(m.wheel_R);
      stream.next(m.wheel_L);
      stream.next(m.gyro);
      stream.next(m.acc1);
      stream.next(m.acc2);
      stream.next(m.magn);
      stream.next(m.velocity);
      stream.next(m.omega);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Odometry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sim_real_msg_interface::Odometry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sim_real_msg_interface::Odometry_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ap_time: ";
    Printer<float>::stream(s, indent + "  ", v.ap_time);
    s << indent << "wheel_R: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_R);
    s << indent << "wheel_L: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_L);
    s << indent << "gyro: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.gyro);
    s << indent << "acc1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acc1);
    s << indent << "acc2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acc2);
    s << indent << "magn: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.magn);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "omega: ";
    Printer<float>::stream(s, indent + "  ", v.omega);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIM_REAL_MSG_INTERFACE_MESSAGE_ODOMETRY_H
